{
  "name": "ddp-srp",
  "version": "0.8.1-2",
  "description": "Node packaging of Meteor's SRP implementation",
  "main": "srp.js",
  "scripts": {
    "test": "node srp_tests.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/oortcloud/ddp-srp.git"
  },
  "keywords": [
    "srp",
    "ddp",
    "meteor"
  ],
  "author": {
    "name": "emgee"
  },
  "license": "MIT",
  "dependencies": {
    "ddp-underscore-patched": "0.8.1-2",
    "ddp-random": "0.8.1-1"
  },
  "devDependencies": {
    "test": "~0.6.0"
  },
  "readme": "ddp-srp\n=======\n\n[![Build Status](https://travis-ci.org/oortcloud/ddp-srp.svg)](https://travis-ci.org/oortcloud/ddp-srp)\n\nLibrary for Secure Remote Password (SRP) exchanges.\n\n\n###`SRP.generateVerifier(password, options)`\n\nGenerate a new SRP verifier. Password is the plaintext password.\n\n`options` is optional and can include:\n\n- `identity`: `String`. The SRP username to user. Mostly this is passed in for testing.  Random UUID if not provided.\n- `salt`: `String`. A salt to use.  Mostly this is passed in for testing.  Random UUID if not provided.\n- SRP parameters (see _defaults and paramsFromOptions below)\n\n\n###`SRP.Client`\n\nGenerate a new SRP client object. Password is the plaintext password.\n\n`options` is optional and can include:\n\n- `a`: client's private ephemeral value. `String` or BigInteger. Normally, this is picked randomly, but it can be passed in for testing.\n- SRP parameters (see _defaults and paramsFromOptions below)\n\n\n###`SRP.Client.startExchange()`\n\nInitiate an SRP exchange.\n\nreturns `{ A: 'client public ephemeral key. hex encoded integer.' }`\n\n\n###`SRP.Client.prototype.respondToChallenge(challenge)`\n\nRespond to the server's challenge with a proof of password.\n\nchallenge is an object with\n\n- `B`: server public ephemeral key. hex encoded integer.\n- `identity`: user's identity (SRP username).\n- `salt`: user's salt.\n\nreturns `{ M: 'client proof of password. hex encoded integer.' }`\n\nthrows an error if it got an invalid challenge.\n\n\n###`SRP.Client.verifyConfirmation(confirmation)`\n\nVerify server's confirmation message.\n\nconfirmation is an object with\n- `HAMK`: server's proof of password.\n\nreturns true or false.\n\n\n###`SRP.Server(verifier, options)`\n\nGenerate a new SRP server object.\n\noptions is optional and can include:\n\n- `b`: server's private ephemeral value. `String` or `BigInteger`. Normally, this is picked randomly, but it can be passed in for testing.\n- SRP parameters (see _defaults and paramsFromOptions below)\n\n\n###`SRP.Server.issueChallenge(request)`\n\nIssue a challenge to the client.\n\nTakes a request from the client containing:\n\n- `A`: hex encoded int.\n\nReturns a challenge with:\n\n- `B`: server public ephemeral key. hex encoded integer.\n- `identity`: user's identity (SRP username).\n- `salt`: user's salt.\n\nThrows an error if issued a bad request.\n\n\n\n###`SRP.Server.verifyResponse(response)`\n\nVerify a response from the client and return confirmation.\n\nTakes a challenge response from the client containing:\n\n- `M`: client proof of password. hex encoded int.\n\nReturns a confirmation if the client's proof is good:\n\n- `HAMK`: server proof of password. hex encoded integer.\n OR `null` if the client's proof doesn't match.\n\n\n###`_defaults`\n\n```js\n/**\n * Default parameter values for SRP.\n *\n */\nvar _defaults = {\n  hash: function (x) { return SHA256(x).toLowerCase(); },\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")\n};\n_defaults.k = new BigInteger(\n  _defaults.hash(\n    _defaults.N.toString(16) +\n      _defaults.g.toString(16)),\n  16);\n```\n\n###`paramsFromOptions`\n\n```js\n/**\n * Process an options hash to create SRP parameters.\n *\n * Options can include:\n * - hash: Function. Defaults to SHA256.\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\n * - g: String or BigInteger. Defaults to 2.\n * - k: String or BigInteger. Defaults to hash(N, g)\n */\nvar paramsFromOptions = function (options) {\n  if (!options) // fast path\n    return _defaults;\n\n  var ret = _.extend({}, _defaults);\n\n  _.each(['N', 'g', 'k'], function (p) {\n    if (options[p]) {\n      if (typeof options[p] === \"string\")\n        ret[p] = new BigInteger(options[p], 16);\n      else if (options[p] instanceof BigInteger)\n        ret[p] = options[p];\n      else\n        throw new Error(\"Invalid parameter: \" + p);\n    }\n  });\n\n  if (options.hash)\n    ret.hash = function (x) { return options.hash(x).toLowerCase(); };\n\n  if (!options.k && (options.N || options.g || options.hash)) {\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\n  }\n\n  return ret;\n};\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/oortcloud/ddp-srp/issues"
  },
  "_id": "ddp-srp@0.8.1-2",
  "dist": {
    "shasum": "c2e3517b84e11853823074e69575189add2e6d4b"
  },
  "_from": "ddp-srp@0.8.1-2",
  "_resolved": "https://registry.npmjs.org/ddp-srp/-/ddp-srp-0.8.1-2.tgz"
}
